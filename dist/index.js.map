{"version":3,"sources":["../index.js"],"names":["inc","type","desc","add","num","payload","asyncAdd","dispatch","getState","console","log","then","res","json","id","promiseFecth","reducer","state","action","Error","middlewares","middleware","store","unsubscribe","subscribe"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;AAGA,IAAMA,MAAM,SAANA,GAAM,GAAM;AACd,WAAO;AACHC,cAAM;AADH,KAAP;AAGH,CAJD;;AAMA,IAAMC,OAAO,SAAPA,IAAO,GAAM;AACf,WAAO;AACHD,cAAM;AADH,KAAP;AAGH,CAJD;;AAMA,IAAME,MAAM,SAANA,GAAM,CAACC,GAAD,EAAS;AACjB,WAAO;AACHH,cAAM,KADH;AAEHI,iBAASD;AAFN,KAAP;AAIH,CALD;;AAOA;;;AAGA,IAAME,WAAW,SAAXA,QAAW,GAAM;;AAEnB;;AAEA;AACA,WAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC3BC,gBAAQC,GAAR,CAAY,cAAZ,EAA4BF,UAA5B;;AAEA,iCAAM,8CAAN,EACCG,IADD,CACM;AAAA,mBAAOC,IAAIC,IAAJ,EAAP;AAAA,SADN,EAECF,IAFD,CAEM;AAAA,mBAAQJ,SAASJ,IAAIU,KAAKC,EAAT,CAAT,CAAR;AAAA,SAFN;AAGH,KAND;AAOH,CAZD;;AAcA;;;AAGA,IAAMC,eAAe,SAAfA,YAAe,GAAM;;AAEvB;AACA,WAAO,UAACR,QAAD,EAAc;AACjBA,iBAAS;AACLN,kBAAM,YADD;AAELI,qBAAS,yBAAM,8CAAN;AAFJ,SAAT;AAIA;AACA;AACA;AACH,KARD;AASH,CAZD;;AAcA;;;;;AAKA,IAAMW,UAAU,SAAVA,OAAU,GAAuB;AAAA,QAAtBC,KAAsB,uEAAd,CAAc;AAAA,QAAXC,MAAW;;;AAEnC,YAAQA,OAAOjB,IAAf;AACI,aAAK,KAAL;AACI,mBAAOgB,QAAQ,CAAf;AACJ,aAAK,MAAL;AACI,mBAAOA,QAAQ,CAAf;AACJ,aAAK,KAAL;AACI,mBAAOA,QAAQC,OAAOb,OAAtB;AACJ,aAAK,OAAL;AACI,kBAAM,IAAIc,KAAJ,EAAN;AACA;;AAEJ;AACA,aAAK,oBAAL;AACA,aAAK,sBAAL;AACA,aAAK,aAAL;AACA;AAAS;AACL,mBAAOF,KAAP;AAhBR;AAkBH,CApBD;;AAsBA;;;AAGA,IAAMG,cAAc,CAAC,uCAAD,8CAApB;AACA,IAAMC,aAAa,wCAAmBD,WAAnB,CAAnB;;AAEA;AACA,IAAIE,QAAQ,wBAAYN,OAAZ,EAAqB,EAArB,EAAyBK,UAAzB,CAAZ;AACA;AACAZ,QAAQC,GAAR,CAAY,cAAZ,EAA4BY,MAAMd,QAAN,EAA5B;;AAEA;AACA;AACA,IAAIe,cAAcD,MAAME,SAAN,CAAgB;AAAA,WAChCf,QAAQC,GAAR,CAAY,iBAAZ,EAA+BY,MAAMd,QAAN,EAA/B,CADgC;AAAA,CAAhB,CAAlB;;AAIAc,MAAMf,QAAN,CAAeP,KAAf;AACAsB,MAAMf,QAAN,CAAeD,UAAf;AACAgB,MAAMf,QAAN,CAAeL,MAAf;AACAoB,MAAMf,QAAN,CAAeQ,cAAf","file":"index.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport fetch from 'node-fetch';\n\n/**\n * actions\n */\nconst inc = () => {\n    return {\n        type: \"INC\"\n    }\n}\n\nconst desc = () => {\n    return {\n        type: \"DESC\"\n    }\n}\n\nconst add = (num) => {\n    return {\n        type: \"ADD\",\n        payload: num\n    }\n}\n\n/**\n * redux-thunk\n */\nconst asyncAdd = () => {\n    \n    // http://redux.js.org/docs/recipes/ReducingBoilerplate.html#actioncreatorsjs\n\n    // Interpreted by the thunk middleware:\n    return (dispatch, getState) => {\n        console.log(\"async Action\", getState());\n\n        fetch('https://jsonplaceholder.typicode.com/posts/4')\n        .then(res => res.json())\n        .then(json => dispatch(add(json.id)));\n    }\n}\n\n/**\n * redux-promise-middleware\n */\nconst promiseFecth = () => {\n\n    // https: //github.com/pburtchaell/redux-promise-middleware/blob/master/docs/guides/chaining-actions.md\n    return (dispatch) => {\n        dispatch({\n            type: \"FETCH_POST\",\n            payload: fetch('https://jsonplaceholder.typicode.com/posts/1')\n        })\n        // Handle response in action function.\n        // .then(({value, action}) => value.json())\n        // .then(json => console.log(\"promiseFecth, \", json))\n    }\n}\n\n/**\n * reducer\n * @param {*} state \n * @param {*} action \n */\nconst reducer = (state = 0, action) => {\n\n    switch (action.type) {\n        case \"INC\":\n            return state + 1;\n        case \"DESC\":\n            return state - 1;\n        case \"ADD\":\n            return state + action.payload;\n        case \"ERROR\":\n            throw new Error();\n            break;\n\n        // auto generated by redux-promise-middleware\n        case \"FETCH_POST_PENDING\":\n        case \"FETCH_POST_FULFILLED\":\n        case \"FETCH_POST_\":\n        default: //return default state\n            return state;\n    }\n}\n\n/**\n * middlewares\n */\nconst middlewares = [promiseMiddleware(), thunk, logger];\nconst middleware = applyMiddleware(...middlewares);\n\n// http://redux.js.org/docs/api/createStore.html#createstorereducer-preloadedstate-enhancer\nlet store = createStore(reducer, 10, middleware);\n// Log the initial state\nconsole.log(\"Initialize, \", store.getState());\n\n// Every time the state changes, log it\n// Note that subscribe() returns a function for unregistering the listener\nlet unsubscribe = store.subscribe(() =>\n  console.log(\"store changed, \", store.getState())\n)\n\nstore.dispatch(inc());\nstore.dispatch(asyncAdd());\nstore.dispatch(desc());\nstore.dispatch(promiseFecth());"]}