'use strict';

var _redux = require('redux');

var _reduxLogger = require('redux-logger');

var _reduxLogger2 = _interopRequireDefault(_reduxLogger);

var _reduxThunk = require('redux-thunk');

var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

var _reduxPromiseMiddleware = require('redux-promise-middleware');

var _reduxPromiseMiddleware2 = _interopRequireDefault(_reduxPromiseMiddleware);

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * actions
 */
var inc = function inc() {
    return {
        type: "INC"
    };
};

var desc = function desc() {
    return {
        type: "DESC"
    };
};

var add = function add(num) {
    return {
        type: "ADD",
        payload: num
    };
};

/**
 * redux-thunk
 */
var asyncAdd = function asyncAdd() {

    // http://redux.js.org/docs/recipes/ReducingBoilerplate.html#actioncreatorsjs

    // Interpreted by the thunk middleware:
    return function (dispatch, getState) {
        console.log("async Action", getState());

        (0, _nodeFetch2.default)('https://jsonplaceholder.typicode.com/posts/4').then(function (res) {
            return res.json();
        }).then(function (json) {
            return dispatch(add(json.id));
        });
    };
};

/**
 * redux-promise-middleware
 */
var promiseFecth = function promiseFecth() {

    // https: //github.com/pburtchaell/redux-promise-middleware/blob/master/docs/guides/chaining-actions.md
    return function (dispatch) {
        dispatch({
            type: "FETCH_POST",
            payload: (0, _nodeFetch2.default)('https://jsonplaceholder.typicode.com/posts/1')
        });
        // Handle response in action function.
        // .then(({value, action}) => value.json())
        // .then(json => console.log("promiseFecth, ", json))
    };
};

/**
 * reducer
 * @param {*} state 
 * @param {*} action 
 */
var reducer = function reducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var action = arguments[1];


    switch (action.type) {
        case "INC":
            return state + 1;
        case "DESC":
            return state - 1;
        case "ADD":
            return state + action.payload;
        case "ERROR":
            throw new Error();
            break;

        // auto generated by redux-promise-middleware
        case "FETCH_POST_PENDING":
        case "FETCH_POST_FULFILLED":
        case "FETCH_POST_":
        default:
            //return default state
            return state;
    }
};

/**
 * middlewares
 */
var middlewares = [(0, _reduxPromiseMiddleware2.default)(), _reduxThunk2.default, _reduxLogger2.default];
var middleware = _redux.applyMiddleware.apply(undefined, middlewares);

// http://redux.js.org/docs/api/createStore.html#createstorereducer-preloadedstate-enhancer
var store = (0, _redux.createStore)(reducer, 10, middleware);
// Log the initial state
console.log("Initialize, ", store.getState());

// Every time the state changes, log it
// Note that subscribe() returns a function for unregistering the listener
var unsubscribe = store.subscribe(function () {
    return console.log("store changed, ", store.getState());
});

store.dispatch(inc());
store.dispatch(asyncAdd());
store.dispatch(desc());
store.dispatch(promiseFecth());
//# sourceMappingURL=index.js.map